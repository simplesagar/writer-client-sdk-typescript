/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DeleteModelCustomizationRequest = {
    customizationId: string;
    modelId: string;
    organizationId?: number | undefined;
};

export type DeleteModelCustomizationResponseBody = {};

export type DeleteModelCustomizationResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    object?: DeleteModelCustomizationResponseBody | undefined;
};

/** @internal */
export namespace DeleteModelCustomizationRequest$ {
    export type Inbound = {
        customizationId: string;
        modelId: string;
        organizationId?: number | undefined;
    };

    export const inboundSchema: z.ZodType<DeleteModelCustomizationRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                customizationId: z.string(),
                modelId: z.string(),
                organizationId: z.number().int().optional(),
            })
            .transform((v) => {
                return {
                    customizationId: v.customizationId,
                    modelId: v.modelId,
                    ...(v.organizationId === undefined
                        ? null
                        : { organizationId: v.organizationId }),
                };
            });

    export type Outbound = {
        customizationId: string;
        modelId: string;
        organizationId?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteModelCustomizationRequest
    > = z
        .object({
            customizationId: z.string(),
            modelId: z.string(),
            organizationId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                customizationId: v.customizationId,
                modelId: v.modelId,
                ...(v.organizationId === undefined ? null : { organizationId: v.organizationId }),
            };
        });
}

/** @internal */
export namespace DeleteModelCustomizationResponseBody$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        DeleteModelCustomizationResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteModelCustomizationResponseBody
    > = z.object({});
}

/** @internal */
export namespace DeleteModelCustomizationResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: DeleteModelCustomizationResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DeleteModelCustomizationResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                Headers: z.record(z.array(z.string())),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                object: z
                    .lazy(() => DeleteModelCustomizationResponseBody$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    headers: v.Headers,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: DeleteModelCustomizationResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteModelCustomizationResponse
    > = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => DeleteModelCustomizationResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
