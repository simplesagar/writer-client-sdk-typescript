/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type PageDetailsRequest = {
    pageId: number;
};

export type PageDetailsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    pageWithSectionResponse?: shared.PageWithSectionResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PageDetailsRequest$ {
    export type Inbound = {
        pageId: number;
    };

    export const inboundSchema: z.ZodType<PageDetailsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            pageId: z.number().int(),
        })
        .transform((v) => {
            return {
                pageId: v.pageId,
            };
        });

    export type Outbound = {
        pageId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PageDetailsRequest> = z
        .object({
            pageId: z.number().int(),
        })
        .transform((v) => {
            return {
                pageId: v.pageId,
            };
        });
}

/** @internal */
export namespace PageDetailsResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        PageWithSectionResponse?: shared.PageWithSectionResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<PageDetailsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            PageWithSectionResponse: shared.PageWithSectionResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                ...(v.PageWithSectionResponse === undefined
                    ? null
                    : { pageWithSectionResponse: v.PageWithSectionResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        PageWithSectionResponse?: shared.PageWithSectionResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PageDetailsResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            pageWithSectionResponse: shared.PageWithSectionResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                ...(v.pageWithSectionResponse === undefined
                    ? null
                    : { PageWithSectionResponse: v.pageWithSectionResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
