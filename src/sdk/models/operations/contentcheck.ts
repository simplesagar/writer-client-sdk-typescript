/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import * as z from "zod";

export type ContentCheckRequest = {
    contentRequest: shared.ContentRequest;
    teamId: number;
    organizationId?: number | undefined;
};

export type ContentCheckResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    processedContent?: shared.ProcessedContent | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ContentCheckRequest$ {
    export type Inbound = {
        ContentRequest: shared.ContentRequest$.Inbound;
        teamId: number;
        organizationId?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ContentCheckRequest, z.ZodTypeDef, Inbound> = z
        .object({
            ContentRequest: shared.ContentRequest$.inboundSchema,
            teamId: z.number().int(),
            organizationId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                contentRequest: v.ContentRequest,
                teamId: v.teamId,
                ...(v.organizationId === undefined ? null : { organizationId: v.organizationId }),
            };
        });

    export type Outbound = {
        ContentRequest: shared.ContentRequest$.Outbound;
        teamId: number;
        organizationId?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentCheckRequest> = z
        .object({
            contentRequest: shared.ContentRequest$.outboundSchema,
            teamId: z.number().int(),
            organizationId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ContentRequest: v.contentRequest,
                teamId: v.teamId,
                ...(v.organizationId === undefined ? null : { organizationId: v.organizationId }),
            };
        });
}

/** @internal */
export namespace ContentCheckResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        ProcessedContent?: shared.ProcessedContent$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<ContentCheckResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            ProcessedContent: shared.ProcessedContent$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                ...(v.ProcessedContent === undefined
                    ? null
                    : { processedContent: v.ProcessedContent }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        ProcessedContent?: shared.ProcessedContent$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentCheckResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            processedContent: shared.ProcessedContent$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                ...(v.processedContent === undefined
                    ? null
                    : { ProcessedContent: v.processedContent }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
