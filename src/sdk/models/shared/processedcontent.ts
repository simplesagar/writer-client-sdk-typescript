/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ContentIssue, ContentIssue$ } from "./contentissue";
import { z } from "zod";

export type ProcessedContent = {
    issues?: Array<ContentIssue> | undefined;
};

/** @internal */
export namespace ProcessedContent$ {
    export type Inbound = {
        issues?: Array<ContentIssue$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ProcessedContent, z.ZodTypeDef, Inbound> = z
        .object({
            issues: z.array(ContentIssue$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.issues === undefined ? null : { issues: v.issues }),
            };
        });

    export type Outbound = {
        issues?: Array<ContentIssue$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProcessedContent> = z
        .object({
            issues: z.array(ContentIssue$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.issues === undefined ? null : { issues: v.issues }),
            };
        });
}
