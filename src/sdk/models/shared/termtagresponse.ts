/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type TermTagResponse = {
    id: number;
    parentTagId: number;
    tag: string;
    termId: number;
};

/** @internal */
export namespace TermTagResponse$ {
    export type Inbound = {
        id: number;
        parentTagId: number;
        tag: string;
        termId: number;
    };

    export const inboundSchema: z.ZodType<TermTagResponse, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().int(),
            parentTagId: z.number().int(),
            tag: z.string(),
            termId: z.number().int(),
        })
        .transform((v) => {
            return {
                id: v.id,
                parentTagId: v.parentTagId,
                tag: v.tag,
                termId: v.termId,
            };
        });

    export type Outbound = {
        id: number;
        parentTagId: number;
        tag: string;
        termId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TermTagResponse> = z
        .object({
            id: z.number().int(),
            parentTagId: z.number().int(),
            tag: z.string(),
            termId: z.number().int(),
        })
        .transform((v) => {
            return {
                id: v.id,
                parentTagId: v.parentTagId,
                tag: v.tag,
                termId: v.termId,
            };
        });
}
