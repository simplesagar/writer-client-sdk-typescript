/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type MagicRequestInput = {
    name: string;
    value?: Array<string> | undefined;
};

/** @internal */
export namespace MagicRequestInput$ {
    export type Inbound = {
        name: string;
        value?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<MagicRequestInput, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            value: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        name: string;
        value?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MagicRequestInput> = z
        .object({
            name: z.string(),
            value: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
