/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type ModelFile = {
    createdAt: Date;
    format: string;
    id: string;
    name: string;
    numberOfSamples: number;
    size: number;
};

/** @internal */
export namespace ModelFile$ {
    export type Inbound = {
        createdAt: string;
        format: string;
        id: string;
        name: string;
        numberOfSamples: number;
        size: number;
    };

    export const inboundSchema: z.ZodType<ModelFile, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            format: z.string(),
            id: z.string(),
            name: z.string(),
            numberOfSamples: z.number().int(),
            size: z.number().int(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                format: v.format,
                id: v.id,
                name: v.name,
                numberOfSamples: v.numberOfSamples,
                size: v.size,
            };
        });

    export type Outbound = {
        createdAt: string;
        format: string;
        id: string;
        name: string;
        numberOfSamples: number;
        size: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ModelFile> = z
        .object({
            createdAt: z.date().transform((v) => v.toISOString()),
            format: z.string(),
            id: z.string(),
            name: z.string(),
            numberOfSamples: z.number().int(),
            size: z.number().int(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                format: v.format,
                id: v.id,
                name: v.name,
                numberOfSamples: v.numberOfSamples,
                size: v.size,
            };
        });
}
