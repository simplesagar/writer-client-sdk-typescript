/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Draft = {
    body: string;
    createdUserId: number;
    creationTime: Date;
    deleted: boolean;
    documentId: string;
    id?: number | undefined;
    inputs?: any | undefined;
    organizationId: number;
    teamId: number;
    templateId: string;
    title?: string | undefined;
};

/** @internal */
export namespace Draft$ {
    export type Inbound = {
        body: string;
        createdUserId: number;
        creationTime: string;
        deleted: boolean;
        documentId: string;
        id?: number | undefined;
        inputs?: any | undefined;
        organizationId: number;
        teamId: number;
        templateId: string;
        title?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Draft, z.ZodTypeDef, Inbound> = z
        .object({
            body: z.string(),
            createdUserId: z.number().int(),
            creationTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            deleted: z.boolean(),
            documentId: z.string(),
            id: z.number().int().optional(),
            inputs: z.any().optional(),
            organizationId: z.number().int(),
            teamId: z.number().int(),
            templateId: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                body: v.body,
                createdUserId: v.createdUserId,
                creationTime: v.creationTime,
                deleted: v.deleted,
                documentId: v.documentId,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.inputs === undefined ? null : { inputs: v.inputs }),
                organizationId: v.organizationId,
                teamId: v.teamId,
                templateId: v.templateId,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });

    export type Outbound = {
        body: string;
        createdUserId: number;
        creationTime: string;
        deleted: boolean;
        documentId: string;
        id?: number | undefined;
        inputs?: any | undefined;
        organizationId: number;
        teamId: number;
        templateId: string;
        title?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Draft> = z
        .object({
            body: z.string(),
            createdUserId: z.number().int(),
            creationTime: z.date().transform((v) => v.toISOString()),
            deleted: z.boolean(),
            documentId: z.string(),
            id: z.number().int().optional(),
            inputs: z.any().optional(),
            organizationId: z.number().int(),
            teamId: z.number().int(),
            templateId: z.string(),
            title: z.string().optional(),
        })
        .transform((v) => {
            return {
                body: v.body,
                createdUserId: v.createdUserId,
                creationTime: v.creationTime,
                deleted: v.deleted,
                documentId: v.documentId,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.inputs === undefined ? null : { inputs: v.inputs }),
                organizationId: v.organizationId,
                teamId: v.teamId,
                templateId: v.templateId,
                ...(v.title === undefined ? null : { title: v.title }),
            };
        });
}
