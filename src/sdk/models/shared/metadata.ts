/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Tier {
    Enterprise1 = "enterprise-1",
    Enterprise2 = "enterprise-2",
    Enterprise3 = "enterprise-3",
    Enterprise4 = "enterprise-4",
}

export type MetaData = {
    portal: Record<string, string>;
    reporting: Record<string, string>;
    snippetsCount: number;
    ssoAccess: boolean;
    styleguide: Record<string, string>;
    teamCount: number;
    termsCount: number;
    tier?: Tier | undefined;
};

/** @internal */
export const Tier$: z.ZodNativeEnum<typeof Tier> = z.nativeEnum(Tier);

/** @internal */
export namespace MetaData$ {
    export type Inbound = {
        portal: Record<string, string>;
        reporting: Record<string, string>;
        snippetsCount: number;
        ssoAccess: boolean;
        styleguide: Record<string, string>;
        teamCount: number;
        termsCount: number;
        tier?: Tier | undefined;
    };

    export const inboundSchema: z.ZodType<MetaData, z.ZodTypeDef, Inbound> = z
        .object({
            portal: z.record(z.string()),
            reporting: z.record(z.string()),
            snippetsCount: z.number().int(),
            ssoAccess: z.boolean(),
            styleguide: z.record(z.string()),
            teamCount: z.number().int(),
            termsCount: z.number().int(),
            tier: Tier$.optional(),
        })
        .transform((v) => {
            return {
                portal: v.portal,
                reporting: v.reporting,
                snippetsCount: v.snippetsCount,
                ssoAccess: v.ssoAccess,
                styleguide: v.styleguide,
                teamCount: v.teamCount,
                termsCount: v.termsCount,
                ...(v.tier === undefined ? null : { tier: v.tier }),
            };
        });

    export type Outbound = {
        portal: Record<string, string>;
        reporting: Record<string, string>;
        snippetsCount: number;
        ssoAccess: boolean;
        styleguide: Record<string, string>;
        teamCount: number;
        termsCount: number;
        tier?: Tier | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MetaData> = z
        .object({
            portal: z.record(z.string()),
            reporting: z.record(z.string()),
            snippetsCount: z.number().int(),
            ssoAccess: z.boolean(),
            styleguide: z.record(z.string()),
            teamCount: z.number().int(),
            termsCount: z.number().int(),
            tier: Tier$.optional(),
        })
        .transform((v) => {
            return {
                portal: v.portal,
                reporting: v.reporting,
                snippetsCount: v.snippetsCount,
                ssoAccess: v.ssoAccess,
                styleguide: v.styleguide,
                teamCount: v.teamCount,
                termsCount: v.termsCount,
                ...(v.tier === undefined ? null : { tier: v.tier }),
            };
        });
}
