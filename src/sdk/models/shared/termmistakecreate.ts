/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum TermMistakeCreatePos {
    Noun = "noun",
    Verb = "verb",
    Adverb = "adverb",
    Adjective = "adjective",
}

export type TermMistakeCreate = {
    caseSensitive: boolean;
    mistake: string;
    pos?: TermMistakeCreatePos | undefined;
    reference?: string | undefined;
};

/** @internal */
export const TermMistakeCreatePos$: z.ZodNativeEnum<typeof TermMistakeCreatePos> =
    z.nativeEnum(TermMistakeCreatePos);

/** @internal */
export namespace TermMistakeCreate$ {
    export type Inbound = {
        caseSensitive: boolean;
        mistake: string;
        pos?: TermMistakeCreatePos | undefined;
        reference?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TermMistakeCreate, z.ZodTypeDef, Inbound> = z
        .object({
            caseSensitive: z.boolean(),
            mistake: z.string(),
            pos: TermMistakeCreatePos$.optional(),
            reference: z.string().optional(),
        })
        .transform((v) => {
            return {
                caseSensitive: v.caseSensitive,
                mistake: v.mistake,
                ...(v.pos === undefined ? null : { pos: v.pos }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
            };
        });

    export type Outbound = {
        caseSensitive: boolean;
        mistake: string;
        pos?: TermMistakeCreatePos | undefined;
        reference?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TermMistakeCreate> = z
        .object({
            caseSensitive: z.boolean(),
            mistake: z.string(),
            pos: TermMistakeCreatePos$.optional(),
            reference: z.string().optional(),
        })
        .transform((v) => {
            return {
                caseSensitive: v.caseSensitive,
                mistake: v.mistake,
                ...(v.pos === undefined ? null : { pos: v.pos }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
            };
        });
}
