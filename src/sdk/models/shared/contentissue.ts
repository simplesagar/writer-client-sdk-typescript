/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum Service {
    CommonMistakes = "common-mistakes",
    BannedWords = "banned-words",
    Dictionary = "dictionary",
    Gec = "gec",
    Infinitive = "infinitive",
    Spelling = "spelling",
    WritingStyle = "writing-style",
    CustomRules = "custom-rules",
    SentenceCase = "sentence-case",
    Acronym = "acronym",
    OxfordComma = "oxford-comma",
    MlPunctuation = "ml-punctuation",
    Emojis = "emojis",
    GenderPronouns = "gender-pronouns",
    Sensitivity = "sensitivity",
    Plagiarism = "plagiarism",
    Readability = "readability",
    SentenceComplexity = "sentence-complexity",
    Vocabulary = "vocabulary",
    ParagraphLength = "paragraph-length",
    PlainLanguage = "plain-language",
    HealthyCommn = "healthy-commn",
    Confidence = "confidence",
    DataLossPrevention = "data-loss-prevention",
    HateSpeech = "hate-speech",
    ContentSafeguards = "content-safeguards",
    Feedback = "feedback",
    Claim = "claim",
    Quote = "quote",
    GenderNouns = "gender-nouns",
    GenderTone = "gender-tone",
    Grammar = "grammar",
    PunctuationDark = "punctuation-dark",
    Formatting = "formatting",
    Twitter = "twitter",
    GecDark = "gec-dark",
    GecGpt3 = "gec-gpt3",
}

export type ContentIssue = {
    description?: string | undefined;
    from: number;
    meta?: any | undefined;
    service: Service;
    suggestions?: Array<string> | undefined;
    until: number;
};

/** @internal */
export const Service$ = z.nativeEnum(Service);

/** @internal */
export namespace ContentIssue$ {
    export type Inbound = {
        description?: string | undefined;
        from: number;
        meta?: any | undefined;
        service: Service;
        suggestions?: Array<string> | undefined;
        until: number;
    };

    export const inboundSchema: z.ZodType<ContentIssue, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            from: z.number().int(),
            meta: z.any().optional(),
            service: Service$,
            suggestions: z.array(z.string()).optional(),
            until: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                from: v.from,
                ...(v.meta === undefined ? null : { meta: v.meta }),
                service: v.service,
                ...(v.suggestions === undefined ? null : { suggestions: v.suggestions }),
                until: v.until,
            };
        });

    export type Outbound = {
        description?: string | undefined;
        from: number;
        meta?: any | undefined;
        service: Service;
        suggestions?: Array<string> | undefined;
        until: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentIssue> = z
        .object({
            description: z.string().optional(),
            from: z.number().int(),
            meta: z.any().optional(),
            service: Service$,
            suggestions: z.array(z.string()).optional(),
            until: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                from: v.from,
                ...(v.meta === undefined ? null : { meta: v.meta }),
                service: v.service,
                ...(v.suggestions === undefined ? null : { suggestions: v.suggestions }),
                until: v.until,
            };
        });
}
