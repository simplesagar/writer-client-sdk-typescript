/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Input, Input$ } from "./input";
import { z } from "zod";

export type TemplateDetailsResponse = {
    categoryId: number;
    creationTime: Date;
    description?: string | undefined;
    guideUrl?: string | undefined;
    id: string;
    inputs?: Array<Input> | undefined;
    modificationTime: Date;
    name: string;
};

/** @internal */
export namespace TemplateDetailsResponse$ {
    export type Inbound = {
        categoryId: number;
        creationTime: string;
        description?: string | undefined;
        guideUrl?: string | undefined;
        id: string;
        inputs?: Array<Input$.Inbound> | undefined;
        modificationTime: string;
        name: string;
    };

    export const inboundSchema: z.ZodType<TemplateDetailsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            categoryId: z.number().int(),
            creationTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            description: z.string().optional(),
            guideUrl: z.string().optional(),
            id: z.string(),
            inputs: z.array(Input$.inboundSchema).optional(),
            modificationTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            name: z.string(),
        })
        .transform((v) => {
            return {
                categoryId: v.categoryId,
                creationTime: v.creationTime,
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.guideUrl === undefined ? null : { guideUrl: v.guideUrl }),
                id: v.id,
                ...(v.inputs === undefined ? null : { inputs: v.inputs }),
                modificationTime: v.modificationTime,
                name: v.name,
            };
        });

    export type Outbound = {
        categoryId: number;
        creationTime: string;
        description?: string | undefined;
        guideUrl?: string | undefined;
        id: string;
        inputs?: Array<Input$.Outbound> | undefined;
        modificationTime: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TemplateDetailsResponse> = z
        .object({
            categoryId: z.number().int(),
            creationTime: z.date().transform((v) => v.toISOString()),
            description: z.string().optional(),
            guideUrl: z.string().optional(),
            id: z.string(),
            inputs: z.array(Input$.outboundSchema).optional(),
            modificationTime: z.date().transform((v) => v.toISOString()),
            name: z.string(),
        })
        .transform((v) => {
            return {
                categoryId: v.categoryId,
                creationTime: v.creationTime,
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.guideUrl === undefined ? null : { guideUrl: v.guideUrl }),
                id: v.id,
                ...(v.inputs === undefined ? null : { inputs: v.inputs }),
                modificationTime: v.modificationTime,
                name: v.name,
            };
        });
}
