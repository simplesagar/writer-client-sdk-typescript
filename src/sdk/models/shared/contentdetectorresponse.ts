/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Label {
    Fake = "fake",
    Real = "real",
}

export type ContentDetectorResponse = {
    label: Label;
    score: number;
};

/** @internal */
export const Label$ = z.nativeEnum(Label);

/** @internal */
export namespace ContentDetectorResponse$ {
    export type Inbound = {
        label: Label;
        score: number;
    };

    export const inboundSchema: z.ZodType<ContentDetectorResponse, z.ZodTypeDef, Inbound> = z
        .object({
            label: Label$,
            score: z.number(),
        })
        .transform((v) => {
            return {
                label: v.label,
                score: v.score,
            };
        });

    export type Outbound = {
        label: Label;
        score: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentDetectorResponse> = z
        .object({
            label: Label$,
            score: z.number(),
        })
        .transform((v) => {
            return {
                label: v.label,
                score: v.score,
            };
        });
}
