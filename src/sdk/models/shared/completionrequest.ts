/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type CompletionRequest = {
    bestOf?: number | undefined;
    frequencyPenalty?: number | undefined;
    logprobs?: number | undefined;
    maxTokens?: number | undefined;
    minTokens?: number | undefined;
    n?: number | undefined;
    presencePenalty?: number | undefined;
    prompt: string;
    stop?: Array<string> | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
};

/** @internal */
export namespace CompletionRequest$ {
    export type Inbound = {
        bestOf?: number | undefined;
        frequencyPenalty?: number | undefined;
        logprobs?: number | undefined;
        maxTokens?: number | undefined;
        minTokens?: number | undefined;
        n?: number | undefined;
        presencePenalty?: number | undefined;
        prompt: string;
        stop?: Array<string> | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
    };

    export const inboundSchema: z.ZodType<CompletionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            bestOf: z.number().int().optional(),
            frequencyPenalty: z.number().optional(),
            logprobs: z.number().int().optional(),
            maxTokens: z.number().int().optional(),
            minTokens: z.number().int().optional(),
            n: z.number().int().optional(),
            presencePenalty: z.number().optional(),
            prompt: z.string(),
            stop: z.array(z.string()).optional(),
            temperature: z.number().optional(),
            topP: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.bestOf === undefined ? null : { bestOf: v.bestOf }),
                ...(v.frequencyPenalty === undefined
                    ? null
                    : { frequencyPenalty: v.frequencyPenalty }),
                ...(v.logprobs === undefined ? null : { logprobs: v.logprobs }),
                ...(v.maxTokens === undefined ? null : { maxTokens: v.maxTokens }),
                ...(v.minTokens === undefined ? null : { minTokens: v.minTokens }),
                ...(v.n === undefined ? null : { n: v.n }),
                ...(v.presencePenalty === undefined
                    ? null
                    : { presencePenalty: v.presencePenalty }),
                prompt: v.prompt,
                ...(v.stop === undefined ? null : { stop: v.stop }),
                ...(v.temperature === undefined ? null : { temperature: v.temperature }),
                ...(v.topP === undefined ? null : { topP: v.topP }),
            };
        });

    export type Outbound = {
        bestOf?: number | undefined;
        frequencyPenalty?: number | undefined;
        logprobs?: number | undefined;
        maxTokens?: number | undefined;
        minTokens?: number | undefined;
        n?: number | undefined;
        presencePenalty?: number | undefined;
        prompt: string;
        stop?: Array<string> | undefined;
        temperature?: number | undefined;
        topP?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompletionRequest> = z
        .object({
            bestOf: z.number().int().optional(),
            frequencyPenalty: z.number().optional(),
            logprobs: z.number().int().optional(),
            maxTokens: z.number().int().optional(),
            minTokens: z.number().int().optional(),
            n: z.number().int().optional(),
            presencePenalty: z.number().optional(),
            prompt: z.string(),
            stop: z.array(z.string()).optional(),
            temperature: z.number().optional(),
            topP: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.bestOf === undefined ? null : { bestOf: v.bestOf }),
                ...(v.frequencyPenalty === undefined
                    ? null
                    : { frequencyPenalty: v.frequencyPenalty }),
                ...(v.logprobs === undefined ? null : { logprobs: v.logprobs }),
                ...(v.maxTokens === undefined ? null : { maxTokens: v.maxTokens }),
                ...(v.minTokens === undefined ? null : { minTokens: v.minTokens }),
                ...(v.n === undefined ? null : { n: v.n }),
                ...(v.presencePenalty === undefined
                    ? null
                    : { presencePenalty: v.presencePenalty }),
                prompt: v.prompt,
                ...(v.stop === undefined ? null : { stop: v.stop }),
                ...(v.temperature === undefined ? null : { temperature: v.temperature }),
                ...(v.topP === undefined ? null : { topP: v.topP }),
            };
        });
}
