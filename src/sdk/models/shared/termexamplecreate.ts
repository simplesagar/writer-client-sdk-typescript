/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum TermExampleCreateType {
    Good = "good",
    Bad = "bad",
}

export type TermExampleCreate = {
    example: string;
    type: TermExampleCreateType;
};

/** @internal */
export const TermExampleCreateType$: z.ZodNativeEnum<typeof TermExampleCreateType> =
    z.nativeEnum(TermExampleCreateType);

/** @internal */
export namespace TermExampleCreate$ {
    export type Inbound = {
        example: string;
        type: TermExampleCreateType;
    };

    export const inboundSchema: z.ZodType<TermExampleCreate, z.ZodTypeDef, Inbound> = z
        .object({
            example: z.string(),
            type: TermExampleCreateType$,
        })
        .transform((v) => {
            return {
                example: v.example,
                type: v.type,
            };
        });

    export type Outbound = {
        example: string;
        type: TermExampleCreateType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TermExampleCreate> = z
        .object({
            example: z.string(),
            type: TermExampleCreateType$,
        })
        .transform((v) => {
            return {
                example: v.example,
                type: v.type,
            };
        });
}
