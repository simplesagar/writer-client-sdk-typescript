/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TerminologyUser = {
    email?: string | undefined;
    fullName?: string | undefined;
    id: number;
};

/** @internal */
export namespace TerminologyUser$ {
    export type Inbound = {
        email?: string | undefined;
        fullName?: string | undefined;
        id: number;
    };

    export const inboundSchema: z.ZodType<TerminologyUser, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            fullName: z.string().optional(),
            id: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.fullName === undefined ? null : { fullName: v.fullName }),
                id: v.id,
            };
        });

    export type Outbound = {
        email?: string | undefined;
        fullName?: string | undefined;
        id: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TerminologyUser> = z
        .object({
            email: z.string().optional(),
            fullName: z.string().optional(),
            id: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.fullName === undefined ? null : { fullName: v.fullName }),
                id: v.id,
            };
        });
}
