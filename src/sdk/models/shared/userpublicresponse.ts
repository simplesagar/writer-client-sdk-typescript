/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum AccountStatus {
    Invited = "invited",
    SignedUp = "signed_up",
}

export type UserPublicResponse = {
    accountStatus: AccountStatus;
    avatar?: string | undefined;
    createdAt: Date;
    email?: string | undefined;
    firstName: string;
    fullName: string;
    id: number;
    invitedBy?: number | undefined;
    lastName?: string | undefined;
    lastSeenOnline?: Date | undefined;
    timezone?: string | undefined;
};

/** @internal */
export const AccountStatus$ = z.nativeEnum(AccountStatus);

/** @internal */
export namespace UserPublicResponse$ {
    export type Inbound = {
        accountStatus: AccountStatus;
        avatar?: string | undefined;
        createdAt: string;
        email?: string | undefined;
        firstName: string;
        fullName: string;
        id: number;
        invitedBy?: number | undefined;
        lastName?: string | undefined;
        lastSeenOnline?: string | undefined;
        timezone?: string | undefined;
    };

    export const inboundSchema: z.ZodType<UserPublicResponse, z.ZodTypeDef, Inbound> = z
        .object({
            accountStatus: AccountStatus$,
            avatar: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            email: z.string().optional(),
            firstName: z.string(),
            fullName: z.string(),
            id: z.number().int(),
            invitedBy: z.number().int().optional(),
            lastName: z.string().optional(),
            lastSeenOnline: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            timezone: z.string().optional(),
        })
        .transform((v) => {
            return {
                accountStatus: v.accountStatus,
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
                createdAt: v.createdAt,
                ...(v.email === undefined ? null : { email: v.email }),
                firstName: v.firstName,
                fullName: v.fullName,
                id: v.id,
                ...(v.invitedBy === undefined ? null : { invitedBy: v.invitedBy }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.lastSeenOnline === undefined ? null : { lastSeenOnline: v.lastSeenOnline }),
                ...(v.timezone === undefined ? null : { timezone: v.timezone }),
            };
        });

    export type Outbound = {
        accountStatus: AccountStatus;
        avatar?: string | undefined;
        createdAt: string;
        email?: string | undefined;
        firstName: string;
        fullName: string;
        id: number;
        invitedBy?: number | undefined;
        lastName?: string | undefined;
        lastSeenOnline?: string | undefined;
        timezone?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserPublicResponse> = z
        .object({
            accountStatus: AccountStatus$,
            avatar: z.string().optional(),
            createdAt: z.date().transform((v) => v.toISOString()),
            email: z.string().optional(),
            firstName: z.string(),
            fullName: z.string(),
            id: z.number().int(),
            invitedBy: z.number().int().optional(),
            lastName: z.string().optional(),
            lastSeenOnline: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            timezone: z.string().optional(),
        })
        .transform((v) => {
            return {
                accountStatus: v.accountStatus,
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
                createdAt: v.createdAt,
                ...(v.email === undefined ? null : { email: v.email }),
                firstName: v.firstName,
                fullName: v.fullName,
                id: v.id,
                ...(v.invitedBy === undefined ? null : { invitedBy: v.invitedBy }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.lastSeenOnline === undefined ? null : { lastSeenOnline: v.lastSeenOnline }),
                ...(v.timezone === undefined ? null : { timezone: v.timezone }),
            };
        });
}
