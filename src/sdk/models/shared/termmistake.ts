/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum TermMistakePos {
    Noun = "noun",
    Verb = "verb",
    Adverb = "adverb",
    Adjective = "adjective",
}

export type TermMistake = {
    caseSensitive: boolean;
    id?: number | undefined;
    mistake: string;
    pos?: TermMistakePos | undefined;
    termBankId: number;
    termId: number;
};

/** @internal */
export const TermMistakePos$ = z.nativeEnum(TermMistakePos);

/** @internal */
export namespace TermMistake$ {
    export type Inbound = {
        caseSensitive: boolean;
        id?: number | undefined;
        mistake: string;
        pos?: TermMistakePos | undefined;
        termBankId: number;
        termId: number;
    };

    export const inboundSchema: z.ZodType<TermMistake, z.ZodTypeDef, Inbound> = z
        .object({
            caseSensitive: z.boolean(),
            id: z.number().int().optional(),
            mistake: z.string(),
            pos: TermMistakePos$.optional(),
            termBankId: z.number().int(),
            termId: z.number().int(),
        })
        .transform((v) => {
            return {
                caseSensitive: v.caseSensitive,
                ...(v.id === undefined ? null : { id: v.id }),
                mistake: v.mistake,
                ...(v.pos === undefined ? null : { pos: v.pos }),
                termBankId: v.termBankId,
                termId: v.termId,
            };
        });

    export type Outbound = {
        caseSensitive: boolean;
        id?: number | undefined;
        mistake: string;
        pos?: TermMistakePos | undefined;
        termBankId: number;
        termId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TermMistake> = z
        .object({
            caseSensitive: z.boolean(),
            id: z.number().int().optional(),
            mistake: z.string(),
            pos: TermMistakePos$.optional(),
            termBankId: z.number().int(),
            termId: z.number().int(),
        })
        .transform((v) => {
            return {
                caseSensitive: v.caseSensitive,
                ...(v.id === undefined ? null : { id: v.id }),
                mistake: v.mistake,
                ...(v.pos === undefined ? null : { pos: v.pos }),
                termBankId: v.termBankId,
                termId: v.termId,
            };
        });
}
