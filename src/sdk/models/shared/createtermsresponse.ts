/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FailMessage, FailMessage$ } from "./failmessage";
import { FullTermWithUser, FullTermWithUser$ } from "./fulltermwithuser";
import * as z from "zod";

export type CreateTermsResponse = {
    fails?: Array<FailMessage> | undefined;
    models?: Array<FullTermWithUser> | undefined;
};

/** @internal */
export namespace CreateTermsResponse$ {
    export type Inbound = {
        fails?: Array<FailMessage$.Inbound> | undefined;
        models?: Array<FullTermWithUser$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<CreateTermsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            fails: z.array(FailMessage$.inboundSchema).optional(),
            models: z.array(FullTermWithUser$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.fails === undefined ? null : { fails: v.fails }),
                ...(v.models === undefined ? null : { models: v.models }),
            };
        });

    export type Outbound = {
        fails?: Array<FailMessage$.Outbound> | undefined;
        models?: Array<FullTermWithUser$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTermsResponse> = z
        .object({
            fails: z.array(FailMessage$.outboundSchema).optional(),
            models: z.array(FullTermWithUser$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.fails === undefined ? null : { fails: v.fails }),
                ...(v.models === undefined ? null : { models: v.models }),
            };
        });
}
