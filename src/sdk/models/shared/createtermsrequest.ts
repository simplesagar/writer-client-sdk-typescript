/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TermCreate, TermCreate$ } from "./termcreate";
import * as z from "zod";

export enum FailHandling {
    Accumulate = "accumulate",
    Validate = "validate",
    Skip = "skip",
    ValidateOnly = "validateOnly",
}

export type CreateTermsRequest = {
    failHandling?: FailHandling | undefined;
    models?: Array<TermCreate> | undefined;
};

/** @internal */
export const FailHandling$ = z.nativeEnum(FailHandling);

/** @internal */
export namespace CreateTermsRequest$ {
    export type Inbound = {
        failHandling?: FailHandling | undefined;
        models?: Array<TermCreate$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<CreateTermsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            failHandling: FailHandling$.optional(),
            models: z.array(TermCreate$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.failHandling === undefined ? null : { failHandling: v.failHandling }),
                ...(v.models === undefined ? null : { models: v.models }),
            };
        });

    export type Outbound = {
        failHandling?: FailHandling | undefined;
        models?: Array<TermCreate$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTermsRequest> = z
        .object({
            failHandling: FailHandling$.optional(),
            models: z.array(TermCreate$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.failHandling === undefined ? null : { failHandling: v.failHandling }),
                ...(v.models === undefined ? null : { models: v.models }),
            };
        });
}
