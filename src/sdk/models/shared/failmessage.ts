/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type FailMessage = {
    description: string;
    extras?: any | undefined;
    key: string;
};

/** @internal */
export namespace FailMessage$ {
    export type Inbound = {
        description: string;
        extras?: any | undefined;
        key: string;
    };

    export const inboundSchema: z.ZodType<FailMessage, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string(),
            extras: z.any().optional(),
            key: z.string(),
        })
        .transform((v) => {
            return {
                description: v.description,
                ...(v.extras === undefined ? null : { extras: v.extras }),
                key: v.key,
            };
        });

    export type Outbound = {
        description: string;
        extras?: any | undefined;
        key: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FailMessage> = z
        .object({
            description: z.string(),
            extras: z.any().optional(),
            key: z.string(),
        })
        .transform((v) => {
            return {
                description: v.description,
                ...(v.extras === undefined ? null : { extras: v.extras }),
                key: v.key,
            };
        });
}
