/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PagePublicApiResponse, PagePublicApiResponse$ } from "./pagepublicapiresponse";
import { Pagination, Pagination$ } from "./pagination";
import * as z from "zod";

export type PaginatedResultPagePublicApiResponse = {
    pagination: Pagination;
    result?: Array<PagePublicApiResponse> | undefined;
    totalCount: number;
};

/** @internal */
export namespace PaginatedResultPagePublicApiResponse$ {
    export type Inbound = {
        pagination: Pagination$.Inbound;
        result?: Array<PagePublicApiResponse$.Inbound> | undefined;
        totalCount: number;
    };

    export const inboundSchema: z.ZodType<
        PaginatedResultPagePublicApiResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            pagination: Pagination$.inboundSchema,
            result: z.array(PagePublicApiResponse$.inboundSchema).optional(),
            totalCount: z.number().int(),
        })
        .transform((v) => {
            return {
                pagination: v.pagination,
                ...(v.result === undefined ? null : { result: v.result }),
                totalCount: v.totalCount,
            };
        });

    export type Outbound = {
        pagination: Pagination$.Outbound;
        result?: Array<PagePublicApiResponse$.Outbound> | undefined;
        totalCount: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaginatedResultPagePublicApiResponse
    > = z
        .object({
            pagination: Pagination$.outboundSchema,
            result: z.array(PagePublicApiResponse$.outboundSchema).optional(),
            totalCount: z.number().int(),
        })
        .transform((v) => {
            return {
                pagination: v.pagination,
                ...(v.result === undefined ? null : { result: v.result }),
                totalCount: v.totalCount,
            };
        });
}
