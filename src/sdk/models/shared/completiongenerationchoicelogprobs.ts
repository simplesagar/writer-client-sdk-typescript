/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type CompletionGenerationChoiceLogprobs = {
    textOffset?: Array<number> | undefined;
    tokenLogprobs?: Array<number> | undefined;
    tokens?: Array<string> | undefined;
    topLogprobs?: Array<Record<string, string>> | undefined;
};

/** @internal */
export namespace CompletionGenerationChoiceLogprobs$ {
    export type Inbound = {
        textOffset?: Array<number> | undefined;
        tokenLogprobs?: Array<number> | undefined;
        tokens?: Array<string> | undefined;
        topLogprobs?: Array<Record<string, string>> | undefined;
    };

    export const inboundSchema: z.ZodType<
        CompletionGenerationChoiceLogprobs,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            textOffset: z.array(z.number().int()).optional(),
            tokenLogprobs: z.array(z.number()).optional(),
            tokens: z.array(z.string()).optional(),
            topLogprobs: z.array(z.record(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.textOffset === undefined ? null : { textOffset: v.textOffset }),
                ...(v.tokenLogprobs === undefined ? null : { tokenLogprobs: v.tokenLogprobs }),
                ...(v.tokens === undefined ? null : { tokens: v.tokens }),
                ...(v.topLogprobs === undefined ? null : { topLogprobs: v.topLogprobs }),
            };
        });

    export type Outbound = {
        textOffset?: Array<number> | undefined;
        tokenLogprobs?: Array<number> | undefined;
        tokens?: Array<string> | undefined;
        topLogprobs?: Array<Record<string, string>> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CompletionGenerationChoiceLogprobs
    > = z
        .object({
            textOffset: z.array(z.number().int()).optional(),
            tokenLogprobs: z.array(z.number()).optional(),
            tokens: z.array(z.string()).optional(),
            topLogprobs: z.array(z.record(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.textOffset === undefined ? null : { textOffset: v.textOffset }),
                ...(v.tokenLogprobs === undefined ? null : { tokenLogprobs: v.tokenLogprobs }),
                ...(v.tokens === undefined ? null : { tokens: v.tokens }),
                ...(v.topLogprobs === undefined ? null : { topLogprobs: v.topLogprobs }),
            };
        });
}
