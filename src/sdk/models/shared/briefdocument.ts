/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SimpleUser } from "./simpleuser";
import { Expose, Transform, Type } from "class-transformer";

export enum Access {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export class BriefDocument extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "access" })
    access: Access;

    @SpeakeasyMetadata()
    @Expose({ name: "createdUser" })
    @Type(() => SimpleUser)
    createdUser?: SimpleUser;

    @SpeakeasyMetadata()
    @Expose({ name: "creationTime" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    creationTime: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: number;

    @SpeakeasyMetadata()
    @Expose({ name: "modificationTime" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    modificationTime: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "modifiedUser" })
    @Type(() => SimpleUser)
    modifiedUser?: SimpleUser;

    @SpeakeasyMetadata()
    @Expose({ name: "organizationId" })
    organizationId: number;

    @SpeakeasyMetadata()
    @Expose({ name: "score" })
    score: number;

    @SpeakeasyMetadata()
    @Expose({ name: "teamId" })
    teamId: number;

    @SpeakeasyMetadata()
    @Expose({ name: "title" })
    title: string;
}
