/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SimpleUser, SimpleUser$ } from "./simpleuser";
import * as z from "zod";

export enum Access {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export type BriefDocument = {
    access: Access;
    createdUser?: SimpleUser | undefined;
    creationTime: Date;
    id: number;
    modificationTime: Date;
    modifiedUser?: SimpleUser | undefined;
    organizationId: number;
    score: number;
    teamId: number;
    title: string;
};

/** @internal */
export const Access$: z.ZodNativeEnum<typeof Access> = z.nativeEnum(Access);

/** @internal */
export namespace BriefDocument$ {
    export type Inbound = {
        access: Access;
        createdUser?: SimpleUser$.Inbound | undefined;
        creationTime: string;
        id: number;
        modificationTime: string;
        modifiedUser?: SimpleUser$.Inbound | undefined;
        organizationId: number;
        score: number;
        teamId: number;
        title: string;
    };

    export const inboundSchema: z.ZodType<BriefDocument, z.ZodTypeDef, Inbound> = z
        .object({
            access: Access$,
            createdUser: SimpleUser$.inboundSchema.optional(),
            creationTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.number().int(),
            modificationTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            modifiedUser: SimpleUser$.inboundSchema.optional(),
            organizationId: z.number().int(),
            score: z.number().int(),
            teamId: z.number().int(),
            title: z.string(),
        })
        .transform((v) => {
            return {
                access: v.access,
                ...(v.createdUser === undefined ? null : { createdUser: v.createdUser }),
                creationTime: v.creationTime,
                id: v.id,
                modificationTime: v.modificationTime,
                ...(v.modifiedUser === undefined ? null : { modifiedUser: v.modifiedUser }),
                organizationId: v.organizationId,
                score: v.score,
                teamId: v.teamId,
                title: v.title,
            };
        });

    export type Outbound = {
        access: Access;
        createdUser?: SimpleUser$.Outbound | undefined;
        creationTime: string;
        id: number;
        modificationTime: string;
        modifiedUser?: SimpleUser$.Outbound | undefined;
        organizationId: number;
        score: number;
        teamId: number;
        title: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BriefDocument> = z
        .object({
            access: Access$,
            createdUser: SimpleUser$.outboundSchema.optional(),
            creationTime: z.date().transform((v) => v.toISOString()),
            id: z.number().int(),
            modificationTime: z.date().transform((v) => v.toISOString()),
            modifiedUser: SimpleUser$.outboundSchema.optional(),
            organizationId: z.number().int(),
            score: z.number().int(),
            teamId: z.number().int(),
            title: z.string(),
        })
        .transform((v) => {
            return {
                access: v.access,
                ...(v.createdUser === undefined ? null : { createdUser: v.createdUser }),
                creationTime: v.creationTime,
                id: v.id,
                modificationTime: v.modificationTime,
                ...(v.modifiedUser === undefined ? null : { modifiedUser: v.modifiedUser }),
                organizationId: v.organizationId,
                score: v.score,
                teamId: v.teamId,
                title: v.title,
            };
        });
}
