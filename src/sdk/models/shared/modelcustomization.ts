/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HyperParameters, HyperParameters$ } from "./hyperparameters";
import { z } from "zod";

export type ModelCustomization = {
    additionalHyperParameters?: HyperParameters | undefined;
    baseModelId: string;
    batchSize?: number | undefined;
    createdAt: Date;
    description?: string | undefined;
    epochs?: number | undefined;
    id: string;
    learningRate?: number | undefined;
    name: string;
    promptTemplate?: string | undefined;
    status: string;
    trainingDatasetFileId: string;
    updatedAt: Date;
    validationDatasetFileId?: string | undefined;
};

/** @internal */
export namespace ModelCustomization$ {
    export type Inbound = {
        additionalHyperParameters?: HyperParameters$.Inbound | undefined;
        baseModelId: string;
        batchSize?: number | undefined;
        createdAt: string;
        description?: string | undefined;
        epochs?: number | undefined;
        id: string;
        learningRate?: number | undefined;
        name: string;
        promptTemplate?: string | undefined;
        status: string;
        trainingDatasetFileId: string;
        updatedAt: string;
        validationDatasetFileId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ModelCustomization, z.ZodTypeDef, Inbound> = z
        .object({
            additionalHyperParameters: HyperParameters$.inboundSchema.optional(),
            baseModelId: z.string(),
            batchSize: z.number().int().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            description: z.string().optional(),
            epochs: z.number().int().optional(),
            id: z.string(),
            learningRate: z.number().optional(),
            name: z.string(),
            promptTemplate: z.string().optional(),
            status: z.string(),
            trainingDatasetFileId: z.string(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            validationDatasetFileId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.additionalHyperParameters === undefined
                    ? null
                    : { additionalHyperParameters: v.additionalHyperParameters }),
                baseModelId: v.baseModelId,
                ...(v.batchSize === undefined ? null : { batchSize: v.batchSize }),
                createdAt: v.createdAt,
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.epochs === undefined ? null : { epochs: v.epochs }),
                id: v.id,
                ...(v.learningRate === undefined ? null : { learningRate: v.learningRate }),
                name: v.name,
                ...(v.promptTemplate === undefined ? null : { promptTemplate: v.promptTemplate }),
                status: v.status,
                trainingDatasetFileId: v.trainingDatasetFileId,
                updatedAt: v.updatedAt,
                ...(v.validationDatasetFileId === undefined
                    ? null
                    : { validationDatasetFileId: v.validationDatasetFileId }),
            };
        });

    export type Outbound = {
        additionalHyperParameters?: HyperParameters$.Outbound | undefined;
        baseModelId: string;
        batchSize?: number | undefined;
        createdAt: string;
        description?: string | undefined;
        epochs?: number | undefined;
        id: string;
        learningRate?: number | undefined;
        name: string;
        promptTemplate?: string | undefined;
        status: string;
        trainingDatasetFileId: string;
        updatedAt: string;
        validationDatasetFileId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ModelCustomization> = z
        .object({
            additionalHyperParameters: HyperParameters$.outboundSchema.optional(),
            baseModelId: z.string(),
            batchSize: z.number().int().optional(),
            createdAt: z.date().transform((v) => v.toISOString()),
            description: z.string().optional(),
            epochs: z.number().int().optional(),
            id: z.string(),
            learningRate: z.number().optional(),
            name: z.string(),
            promptTemplate: z.string().optional(),
            status: z.string(),
            trainingDatasetFileId: z.string(),
            updatedAt: z.date().transform((v) => v.toISOString()),
            validationDatasetFileId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.additionalHyperParameters === undefined
                    ? null
                    : { additionalHyperParameters: v.additionalHyperParameters }),
                baseModelId: v.baseModelId,
                ...(v.batchSize === undefined ? null : { batchSize: v.batchSize }),
                createdAt: v.createdAt,
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.epochs === undefined ? null : { epochs: v.epochs }),
                id: v.id,
                ...(v.learningRate === undefined ? null : { learningRate: v.learningRate }),
                name: v.name,
                ...(v.promptTemplate === undefined ? null : { promptTemplate: v.promptTemplate }),
                status: v.status,
                trainingDatasetFileId: v.trainingDatasetFileId,
                updatedAt: v.updatedAt,
                ...(v.validationDatasetFileId === undefined
                    ? null
                    : { validationDatasetFileId: v.validationDatasetFileId }),
            };
        });
}
