/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FullTermWithUser, FullTermWithUser$ } from "./fulltermwithuser";
import { Pagination, Pagination$ } from "./pagination";
import * as z from "zod";

export type PaginatedResultFullTermWithUser = {
    pagination: Pagination;
    result?: Array<FullTermWithUser> | undefined;
    totalCount: number;
};

/** @internal */
export namespace PaginatedResultFullTermWithUser$ {
    export type Inbound = {
        pagination: Pagination$.Inbound;
        result?: Array<FullTermWithUser$.Inbound> | undefined;
        totalCount: number;
    };

    export const inboundSchema: z.ZodType<PaginatedResultFullTermWithUser, z.ZodTypeDef, Inbound> =
        z
            .object({
                pagination: Pagination$.inboundSchema,
                result: z.array(FullTermWithUser$.inboundSchema).optional(),
                totalCount: z.number().int(),
            })
            .transform((v) => {
                return {
                    pagination: v.pagination,
                    ...(v.result === undefined ? null : { result: v.result }),
                    totalCount: v.totalCount,
                };
            });

    export type Outbound = {
        pagination: Pagination$.Outbound;
        result?: Array<FullTermWithUser$.Outbound> | undefined;
        totalCount: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PaginatedResultFullTermWithUser
    > = z
        .object({
            pagination: Pagination$.outboundSchema,
            result: z.array(FullTermWithUser$.outboundSchema).optional(),
            totalCount: z.number().int(),
        })
        .transform((v) => {
            return {
                pagination: v.pagination,
                ...(v.result === undefined ? null : { result: v.result }),
                totalCount: v.totalCount,
            };
        });
}
