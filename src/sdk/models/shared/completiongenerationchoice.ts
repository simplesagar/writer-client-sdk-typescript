/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    CompletionGenerationChoiceLogprobs,
    CompletionGenerationChoiceLogprobs$,
} from "./completiongenerationchoicelogprobs";
import * as z from "zod";

export type CompletionGenerationChoice = {
    logprobs?: CompletionGenerationChoiceLogprobs | undefined;
    text: string;
};

/** @internal */
export namespace CompletionGenerationChoice$ {
    export type Inbound = {
        logprobs?: CompletionGenerationChoiceLogprobs$.Inbound | undefined;
        text: string;
    };

    export const inboundSchema: z.ZodType<CompletionGenerationChoice, z.ZodTypeDef, Inbound> = z
        .object({
            logprobs: CompletionGenerationChoiceLogprobs$.inboundSchema.optional(),
            text: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.logprobs === undefined ? null : { logprobs: v.logprobs }),
                text: v.text,
            };
        });

    export type Outbound = {
        logprobs?: CompletionGenerationChoiceLogprobs$.Outbound | undefined;
        text: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompletionGenerationChoice> = z
        .object({
            logprobs: CompletionGenerationChoiceLogprobs$.outboundSchema.optional(),
            text: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.logprobs === undefined ? null : { logprobs: v.logprobs }),
                text: v.text,
            };
        });
}
