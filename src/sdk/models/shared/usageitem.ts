/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type UsageItem = {
    limit: number;
    value: number;
};

/** @internal */
export namespace UsageItem$ {
    export type Inbound = {
        limit: number;
        value: number;
    };

    export const inboundSchema: z.ZodType<UsageItem, z.ZodTypeDef, Inbound> = z
        .object({
            limit: z.number().int(),
            value: z.number().int(),
        })
        .transform((v) => {
            return {
                limit: v.limit,
                value: v.value,
            };
        });

    export type Outbound = {
        limit: number;
        value: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UsageItem> = z
        .object({
            limit: z.number().int(),
            value: z.number().int(),
        })
        .transform((v) => {
            return {
                limit: v.limit,
                value: v.value,
            };
        });
}
