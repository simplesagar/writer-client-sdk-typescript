/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum InputType {
    Textbox = "textbox",
    Textarea = "textarea",
    Dropdown = "dropdown",
}

export type Input = {
    dynamic: boolean;
    help?: string | undefined;
    maxFields?: number | undefined;
    minFields?: number | undefined;
    name: string;
    options?: Array<string> | undefined;
    required: boolean;
    subtitle?: string | undefined;
    type: InputType;
    unitCopy?: string | undefined;
};

/** @internal */
export const InputType$ = z.nativeEnum(InputType);

/** @internal */
export namespace Input$ {
    export type Inbound = {
        dynamic: boolean;
        help?: string | undefined;
        maxFields?: number | undefined;
        minFields?: number | undefined;
        name: string;
        options?: Array<string> | undefined;
        required: boolean;
        subtitle?: string | undefined;
        type: InputType;
        unitCopy?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Input, z.ZodTypeDef, Inbound> = z
        .object({
            dynamic: z.boolean(),
            help: z.string().optional(),
            maxFields: z.number().int().optional(),
            minFields: z.number().int().optional(),
            name: z.string(),
            options: z.array(z.string()).optional(),
            required: z.boolean(),
            subtitle: z.string().optional(),
            type: InputType$,
            unitCopy: z.string().optional(),
        })
        .transform((v) => {
            return {
                dynamic: v.dynamic,
                ...(v.help === undefined ? null : { help: v.help }),
                ...(v.maxFields === undefined ? null : { maxFields: v.maxFields }),
                ...(v.minFields === undefined ? null : { minFields: v.minFields }),
                name: v.name,
                ...(v.options === undefined ? null : { options: v.options }),
                required: v.required,
                ...(v.subtitle === undefined ? null : { subtitle: v.subtitle }),
                type: v.type,
                ...(v.unitCopy === undefined ? null : { unitCopy: v.unitCopy }),
            };
        });

    export type Outbound = {
        dynamic: boolean;
        help?: string | undefined;
        maxFields?: number | undefined;
        minFields?: number | undefined;
        name: string;
        options?: Array<string> | undefined;
        required: boolean;
        subtitle?: string | undefined;
        type: InputType;
        unitCopy?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Input> = z
        .object({
            dynamic: z.boolean(),
            help: z.string().optional(),
            maxFields: z.number().int().optional(),
            minFields: z.number().int().optional(),
            name: z.string(),
            options: z.array(z.string()).optional(),
            required: z.boolean(),
            subtitle: z.string().optional(),
            type: InputType$,
            unitCopy: z.string().optional(),
        })
        .transform((v) => {
            return {
                dynamic: v.dynamic,
                ...(v.help === undefined ? null : { help: v.help }),
                ...(v.maxFields === undefined ? null : { maxFields: v.maxFields }),
                ...(v.minFields === undefined ? null : { minFields: v.minFields }),
                name: v.name,
                ...(v.options === undefined ? null : { options: v.options }),
                required: v.required,
                ...(v.subtitle === undefined ? null : { subtitle: v.subtitle }),
                type: v.type,
                ...(v.unitCopy === undefined ? null : { unitCopy: v.unitCopy }),
            };
        });
}
