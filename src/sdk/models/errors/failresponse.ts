/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

/**
 * Bad Request
 */
export type FailResponseData = {
    errors?: Array<shared.FailMessage> | undefined;
    extras?: any | undefined;
    tpe: string;
};

/**
 * Bad Request
 */
export class FailResponse extends Error {
    errors?: Array<shared.FailMessage> | undefined;
    extras?: any | undefined;
    tpe: string;

    /** The original data that was passed to this error instance. */
    data$: FailResponseData;

    constructor(err: FailResponseData, options?: ErrorOptions) {
        super("", options);
        this.data$ = err;

        if (err.errors != null) {
            this.errors = err.errors;
        }
        if (err.extras != null) {
            this.extras = err.extras;
        }
        this.tpe = err.tpe;

        const msg = "message" in err && typeof err.message === "string" ? err.message : "";
        const content = JSON.stringify(err);
        this.message = [msg, content].filter(Boolean).join("\n");

        this.name = "FailResponse";
    }
}

/** @internal */
export namespace FailResponse$ {
    export type Inbound = {
        errors?: Array<shared.FailMessage$.Inbound> | undefined;
        extras?: any | undefined;
        tpe: string;
    };
    export type Outbound = {
        errors?: Array<shared.FailMessage> | undefined;
        extras?: any | undefined;
        tpe: string;
    };

    export const inboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Inbound> = z
        .object({
            errors: z.array(shared.FailMessage$.inboundSchema).optional(),
            extras: z.any().optional(),
            tpe: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.errors === undefined ? null : { errors: v.errors }),
                ...(v.extras === undefined ? null : { extras: v.extras }),
                tpe: v.tpe,
            };
        });
}
