/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class Terminology extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Add terms
     */
    async add(
        input: operations.AddTermsRequest,
        options?: RequestOptions
    ): Promise<operations.AddTermsResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = operations.AddTermsRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.CreateTermsRequest, { explode: true });

        const pathParams = {
            organizationId: enc$.encodeSimple(
                "organizationId",
                payload.organizationId ?? this.options$.organizationId,
                { explode: false, charEncoding: "percent" }
            ),
            teamId: enc$.encodeSimple("teamId", payload.teamId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent(
            "/terminology/organization/{organizationId}/team/{teamId}"
        )(pathParams);

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.AddTermsResponse$.inboundSchema.parse({
                ...responseFields,
                Headers: this.unpackHeaders(response.headers),
                CreateTermsResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 401, 403, 404, 500], "application/json")) {
            const responseBody = await response.json();
            const result = errors.FailResponse$.inboundSchema.parse({
                ...responseFields,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw new errors.FailResponse(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Delete terms
     */
    async delete(
        input: operations.DeleteTermsRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteTermsResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.DeleteTermsRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            organizationId: enc$.encodeSimple(
                "organizationId",
                payload.organizationId ?? this.options$.organizationId,
                { explode: false, charEncoding: "percent" }
            ),
            teamId: enc$.encodeSimple("teamId", payload.teamId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent(
            "/terminology/organization/{organizationId}/team/{teamId}"
        )(pathParams);

        const query = [
            enc$.encodeForm("ids", payload.ids, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        headers.set(
            "X-Request-ID",
            enc$.encodeSimple("X-Request-ID", payload["X-Request-ID"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "delete", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.DeleteTermsResponse$.inboundSchema.parse({
                ...responseFields,
                Headers: this.unpackHeaders(response.headers),
                DeleteResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 401, 403, 404, 500], "application/json")) {
            const responseBody = await response.json();
            const result = errors.FailResponse$.inboundSchema.parse({
                ...responseFields,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw new errors.FailResponse(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Find terms
     */
    async find(
        input: operations.FindTermsRequest,
        options?: RequestOptions
    ): Promise<operations.FindTermsResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.FindTermsRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            organizationId: enc$.encodeSimple(
                "organizationId",
                payload.organizationId ?? this.options$.organizationId,
                { explode: false, charEncoding: "percent" }
            ),
            teamId: enc$.encodeSimple("teamId", payload.teamId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent(
            "/terminology/organization/{organizationId}/team/{teamId}"
        )(pathParams);

        const query = [
            enc$.encodeForm("limit", payload.limit, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("offset", payload.offset, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("partOfSpeech", payload.partOfSpeech, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("sortField", payload.sortField, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("sortOrder", payload.sortOrder, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("tags", payload.tags, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("term", payload.term, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("type", payload.type, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.FindTermsResponse$.inboundSchema.parse({
                ...responseFields,
                Headers: this.unpackHeaders(response.headers),
                PaginatedResult_FullTermWithUser: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 401, 403, 404, 500], "application/json")) {
            const responseBody = await response.json();
            const result = errors.FailResponse$.inboundSchema.parse({
                ...responseFields,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw new errors.FailResponse(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update terms
     */
    async update(
        input: operations.UpdateTermsRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateTermsResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = operations.UpdateTermsRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.UpdateTermsRequest, { explode: true });

        const pathParams = {
            organizationId: enc$.encodeSimple(
                "organizationId",
                payload.organizationId ?? this.options$.organizationId,
                { explode: false, charEncoding: "percent" }
            ),
            teamId: enc$.encodeSimple("teamId", payload.teamId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent(
            "/terminology/organization/{organizationId}/team/{teamId}"
        )(pathParams);

        headers.set(
            "X-Request-ID",
            enc$.encodeSimple("X-Request-ID", payload["X-Request-ID"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "put", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateTermsResponse$.inboundSchema.parse({
                ...responseFields,
                Headers: this.unpackHeaders(response.headers),
                CreateTermsResponse: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 401, 403, 404, 500], "application/json")) {
            const responseBody = await response.json();
            const result = errors.FailResponse$.inboundSchema.parse({
                ...responseFields,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw new errors.FailResponse(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
